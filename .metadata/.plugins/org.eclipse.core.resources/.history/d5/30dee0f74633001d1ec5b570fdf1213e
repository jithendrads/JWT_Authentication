package com.example.springbootsecurity.config;

import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@Service
public class JwtUtil {
	
	private String secret;
	private int expirationDateInMs;
	
	@Value("${jwt.secret}")
	public void setSecret(String secret) {
		this.secret = secret;
	}
	
	@Value("${jwt.expirationDateInMs}")
	public void setExpirationDateInMs(int expirationDateInMs) {
		this.expirationDateInMs = expirationDateInMs;
	}
	
	
	public String generateToken(UserDetails userDetails)
	{
		Map<String,Object> claims=new HashMap<>();
		Collection<? extends GrantedAuthority> roles = userDetails.getAuthorities();
		
		if(roles.contains(new SimpleGrantedAuthority("ROLE_ADMIN")))
		{
			claims.put("isAdmin", true);
		}
		
		if(roles.contains(new SimpleGrantedAuthority("ROLE_USER")))
		{
			claims.put("isUser", true);
		}
		
		return doGenerateToken(claims,userDetails.getUsername());
	}

	private String doGenerateToken(Map<String, Object> claims, String subject) {
		return Jwts.builder()
				.setClaims(claims)
				.setSubject(subject)
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis()+expirationDateInMs))
				.signWith(SignatureAlgorithm.HS512, secret)
				.compact();
	}
	
	public boolean validateToken(String authToken)
	{
		try
		{
		Jws<Claims> claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(authToken);
		return true;
		}
		catch(SignatureException | MalformedJwtException | UnsupportedJwtException | IllegalArgumentException e)
		{
			throw new BadCredentialsException("INVALID_CREDENTIALS", e);
		}
		catch(ExpiredJwtException e)
		{
			throw e;
		}
	}
	
	public String getUsernameFromToken(String token)
	{
		Claims claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
		return claims.getSubject();
	}
	
	public List<SimpleGrantedAuthority> getRolesFromToken(String token)
	{
		Claims claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
		List<SimpleGrantedAuthority> roles=null;
		Boolean isAdmin=claims.get("isAdmin",Boolean.class);
		Boolean isUser=claims.get("isUser",Boolean.class);
	}

}
