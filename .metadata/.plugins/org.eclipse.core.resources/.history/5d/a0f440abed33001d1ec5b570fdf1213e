package com.example.springbootsecurity.config;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.springbootsecurity.model.DAOUser;
import com.example.springbootsecurity.model.UserDTO;
import com.example.springbootsecurity.repository.UserRepository;

@Service
public class CustomUserDetailService implements UserDetailsService {
	
	@Autowired
	private UserRepository userDao;
	@Autowired
	private PasswordEncoder bcryptEncoder;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException
	{
		List<SimpleGrantedAuthority> roles= null;
		
		if(username.equals("admin"))
		{
			roles=Arrays.asList(new SimpleGrantedAuthority("ROLE_ADMIN"));
			return new User("admin","$2a$10$BBSfLehcVwRHcNkNSSNlZuMMoWFmhmkx2W9xGRs1ZUImp2EvvX/tm",roles);
		}
		
		if(username.equals("user"))
		{
			roles=Arrays.asList(new SimpleGrantedAuthority("ROLE_USER"));
			return new User("user","$2a$10$hgKkw6cwRagT.raifyfdguOMj6GcZtjdUDO0A2bxcK54WuH3mAOoe",roles);
		}
		
		else throw new UsernameNotFoundException("User not found with the username "+username);
	}
		
		
	public DAOUser save(UserDTO user)
	{
		DAOUser newUser=new DAOUser();
		newUser.setUsername(user.getUsername());
		newUser.setPassword(bcryptEncoder.encode(user.getPassword()));
		newUser.setRole(user.getRole());
		return userDao.save(newUser);
	}

}
